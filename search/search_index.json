{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the My-DOST project that is a utility module for Python. This package is a collection of utilities that you can use in your projects. Table Of Contents The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages. Acknowledgements I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"My-DOST Docs"},{"location":"#table-of-contents","text":"The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts: Tutorials How-To Guides Reference Explanation Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#acknowledgements","text":"I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"Acknowledgements"},{"location":"explanation/","text":"This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented. Note: Expand this section by considering the following points: Give context and background on your library Explain why you created it Provide multiple examples and approaches of how to work with it Help the reader make connections Avoid writing instructions or technical descriptions here","title":"Explanation"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How To Add Two Numbers? You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How-To Guides"},{"location":"how-to-guides/#how-to-add-two-numbers","text":"You have two numbers and you need to add them together. You're in luck! The calculator package can help you get this done. Download the code from this GitHub repository and place the calculator/ folder in the same directory as your Python script: your_project/ \u2502 \u251c\u2500\u2500 calculator/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 calculations.py \u2502 \u2514\u2500\u2500 your_script.py Inside of your_script.py you can now import the add() function from the calculator.calculations module: # your_script.py from calculator.calculations import add After you've imported the function, you can use it to add any two numbers that you need to add: # your_script.py from calculator.calculations import add print(add(20, 22)) # OUTPUT: 42.0 You're now able to add any two numbers, and you'll always get a float as a result.","title":"How To Add Two Numbers?"},{"location":"reference/","text":"This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the My-DOST project code. Folder module for my_dost. This module contains functions for working with folders and files. Examples: >>> from my_dost import folder >>> folder . folder_read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' The module contains the following functions: folder_read_text_file(txt_file_path) : Read a text file and return the content as a string. folder_read_text_file ( txt_file_path ) Reads a text file and returns its contents as a string. Parameters: Name Type Description Default txt_file_path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> folder_read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> folder_read_text_file ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.'] Source code in my_dost\\folder.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @dostify ( errors = [( FileNotFoundError , '' )]) def folder_read_text_file ( txt_file_path : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]]) -> Union [ str , List [ str ]]: \"\"\"Reads a text file and returns its contents as a string. Args: txt_file_path (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the text file. Returns: The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> folder_read_text_file('tests\\\\demo.txt') 'This is a demo text file.' >>> folder_read_text_file(['tests\\\\demo.txt', 'tests\\\\demo2.txt']) ['This is a demo text file.', 'This is a demo2 text file.'] \"\"\" if isinstance ( txt_file_path , list ): return [ folder_read_text_file ( path ) for path in txt_file_path ] file_path = os . path . abspath ( txt_file_path ) if not os . path . isfile ( file_path ): raise FileNotFoundError ( f 'File not found: { file_path } ' ) with open ( txt_file_path , 'r' ) as f : return f . read () folder_write_text_file ( txt_file_path , contents ) Write a text file with the given contents. Parameters: Name Type Description Default txt_file_path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> folder_write_text_file ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> folder_read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' Source code in my_dost\\folder.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @dostify ( errors = []) def folder_write_text_file ( txt_file_path : Union [ str , WindowsPath ], contents : str ): # Description: \"\"\" Write a text file with the given contents. Args: txt_file_path (Union[str, WindowsPath]): The path to the text file. contents (str): The contents of the text file. Examples: >>> folder_write_text_file('tests\\\\demo.txt', 'This is a demo text file.') >>> folder_read_text_file('tests\\\\demo.txt') 'This is a demo text file.' \"\"\" # Body section txt_file_path = os . path . abspath ( txt_file_path ) with open ( txt_file_path , 'w' ) as f : f . write ( contents )","title":"Reference"},{"location":"reference/#my_dost.folder.folder_read_text_file","text":"Reads a text file and returns its contents as a string. Parameters: Name Type Description Default txt_file_path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> folder_read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> folder_read_text_file ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.'] Source code in my_dost\\folder.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 @dostify ( errors = [( FileNotFoundError , '' )]) def folder_read_text_file ( txt_file_path : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]]) -> Union [ str , List [ str ]]: \"\"\"Reads a text file and returns its contents as a string. Args: txt_file_path (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the text file. Returns: The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> folder_read_text_file('tests\\\\demo.txt') 'This is a demo text file.' >>> folder_read_text_file(['tests\\\\demo.txt', 'tests\\\\demo2.txt']) ['This is a demo text file.', 'This is a demo2 text file.'] \"\"\" if isinstance ( txt_file_path , list ): return [ folder_read_text_file ( path ) for path in txt_file_path ] file_path = os . path . abspath ( txt_file_path ) if not os . path . isfile ( file_path ): raise FileNotFoundError ( f 'File not found: { file_path } ' ) with open ( txt_file_path , 'r' ) as f : return f . read ()","title":"folder_read_text_file()"},{"location":"reference/#my_dost.folder.folder_write_text_file","text":"Write a text file with the given contents. Parameters: Name Type Description Default txt_file_path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> folder_write_text_file ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> folder_read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' Source code in my_dost\\folder.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @dostify ( errors = []) def folder_write_text_file ( txt_file_path : Union [ str , WindowsPath ], contents : str ): # Description: \"\"\" Write a text file with the given contents. Args: txt_file_path (Union[str, WindowsPath]): The path to the text file. contents (str): The contents of the text file. Examples: >>> folder_write_text_file('tests\\\\demo.txt', 'This is a demo text file.') >>> folder_read_text_file('tests\\\\demo.txt') 'This is a demo text file.' \"\"\" # Body section txt_file_path = os . path . abspath ( txt_file_path ) with open ( txt_file_path , 'w' ) as f : f . write ( contents )","title":"folder_write_text_file()"},{"location":"tutorials/","text":"This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project. Note: Expand this section by considering the following points: Help newcomers with getting started Teach readers about your library by making them write code Inspire confidence through examples that work for everyone, repeatably Give readers an immediate sense of achievement Show concrete examples, no abstractions Provide the minimum necessary explanation Avoid any distractions","title":"Tutorials"}]}