{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the My-DOST project that is a utility module for Python. This package is a collection of utilities that you can use in your projects. Table Of Contents Folder Mouse Message Quickly find what you're looking for depending on your use case by looking at the different pages. Acknowledgements I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"My-DOST Docs"},{"location":"#table-of-contents","text":"Folder Mouse Message Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#acknowledgements","text":"I want to thank my house plants for providing me with a negligible amount of oxygen each day. Also, I want to thank the sun for providing more than half of their nourishment free of charge.","title":"Acknowledgements"},{"location":"folder/","text":"Folder module for my_dost. This module contains functions for working with folders and files. Examples: >>> from my_dost import folder >>> folder . read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' The module contains the following functions: read_text_file(path) : Read a text file and return the content as a string. write_text_file(path, content) : Write a text file with the given content. read_text_file ( path ) Reads a text file and returns its contents as a string. Parameters: Name Type Description Default path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> read_text_file ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.'] Source code in my_dost\\folder.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @dostify ( errors = [( FileNotFoundError , '' )]) def read_text_file ( path : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]]) -> Union [ str , List [ str ]]: \"\"\"Reads a text file and returns its contents as a string. Args: path (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the text file. Returns: The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text_file('tests\\\\demo.txt') 'This is a demo text file.' >>> read_text_file(['tests\\\\demo.txt', 'tests\\\\demo2.txt']) ['This is a demo text file.', 'This is a demo2 text file.'] \"\"\" if isinstance ( path , list ): return [ read_text_file ( path ) for path in path ] file_path = os . path . abspath ( path ) if not os . path . isfile ( file_path ): raise FileNotFoundError ( f 'File not found: { file_path } ' ) with open ( path , 'r' ) as f : return f . read () write_text_file ( path , contents ) Write a text file with the given contents. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> write_text_file ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' Source code in my_dost\\folder.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @dostify ( errors = []) def write_text_file ( path : Union [ str , WindowsPath ], contents : str ): # Description: \"\"\" Write a text file with the given contents. Args: path (Union[str, WindowsPath]): The path to the text file. contents (str): The contents of the text file. Examples: >>> write_text_file('tests\\\\demo.txt', 'This is a demo text file.') >>> read_text_file('tests\\\\demo.txt') 'This is a demo text file.' \"\"\" # Body section path = os . path . abspath ( path ) with open ( path , 'w' ) as f : f . write ( contents )","title":"Folder"},{"location":"folder/#my_dost.folder.read_text_file","text":"Reads a text file and returns its contents as a string. Parameters: Name Type Description Default path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> read_text_file ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.'] Source code in my_dost\\folder.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 @dostify ( errors = [( FileNotFoundError , '' )]) def read_text_file ( path : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]]) -> Union [ str , List [ str ]]: \"\"\"Reads a text file and returns its contents as a string. Args: path (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the text file. Returns: The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text_file('tests\\\\demo.txt') 'This is a demo text file.' >>> read_text_file(['tests\\\\demo.txt', 'tests\\\\demo2.txt']) ['This is a demo text file.', 'This is a demo2 text file.'] \"\"\" if isinstance ( path , list ): return [ read_text_file ( path ) for path in path ] file_path = os . path . abspath ( path ) if not os . path . isfile ( file_path ): raise FileNotFoundError ( f 'File not found: { file_path } ' ) with open ( path , 'r' ) as f : return f . read ()","title":"read_text_file()"},{"location":"folder/#my_dost.folder.write_text_file","text":"Write a text file with the given contents. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> write_text_file ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> read_text_file ( 'tests\\demo.txt' ) 'This is a demo text file.' Source code in my_dost\\folder.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @dostify ( errors = []) def write_text_file ( path : Union [ str , WindowsPath ], contents : str ): # Description: \"\"\" Write a text file with the given contents. Args: path (Union[str, WindowsPath]): The path to the text file. contents (str): The contents of the text file. Examples: >>> write_text_file('tests\\\\demo.txt', 'This is a demo text file.') >>> read_text_file('tests\\\\demo.txt') 'This is a demo text file.' \"\"\" # Body section path = os . path . abspath ( path ) with open ( path , 'w' ) as f : f . write ( contents )","title":"write_text_file()"},{"location":"message/","text":"Message module for my_dost. This module contains functions for displaying messages to the user. Examples: >>> from my_dost import message >>> message . info ( 'Hello World!' ) >>> message . error ( 'Hello World!' ) >>> message . warning ( 'Hello World!' ) The module contains the following functions: info(msg) : Display an info message. error(msg) : Display an error message. warning(msg) : Display a warning message. error ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error ( 'This is a demo message.' ) Source code in my_dost\\message.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dostify ( errors = []) def error ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x10 ) info ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> info ( 'This is a demo message.' ) Source code in my_dost\\message.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 @dostify ( errors = []) def info ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> info('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x40 ) warning ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning ( 'This is a demo message.' ) Source code in my_dost\\message.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @dostify ( errors = []) def warning ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x30 )","title":"Message"},{"location":"message/#my_dost.message.error","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error ( 'This is a demo message.' ) Source code in my_dost\\message.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 @dostify ( errors = []) def error ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x10 )","title":"error()"},{"location":"message/#my_dost.message.info","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> info ( 'This is a demo message.' ) Source code in my_dost\\message.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 @dostify ( errors = []) def info ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> info('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x40 )","title":"info()"},{"location":"message/#my_dost.message.warning","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning ( 'This is a demo message.' ) Source code in my_dost\\message.py 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 @dostify ( errors = []) def warning ( message : str , title : str = \"PyBOTs\" ) -> None : \"\"\"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning('This is a demo message.') \"\"\" # import section import ctypes # code section ctypes . windll . user32 . MessageBoxW ( 0 , message , title , 0x30 )","title":"warning()"},{"location":"mouse/","text":"Mouse module for my_dost. This module contains functions for mouse control. Examples: >>> from my_dost import mouse >>> mouse . click ( 100 , 100 ) >>> mouse . search ( 'tests\\demo.png' ) (23, 17) The module contains the following functions: click(x, y, button, clicks, absolute) : Click at the given coordinates. search(img, wait, left_click) : Search for an image on the screen and return the coordinates of the top-left corner of the image. click ( x , y , button = 'left' , clicks = 1 , absolute = True ) Clicks the mouse at the given co-ordinates. Parameters: Name Type Description Default x int X co-ordinate. required y int Y co-ordinate. required button str The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". 'left' clicks int Number of times to click the mouse button. Defaults to 1. 1 absolute bool Whether the co-ordinates are absolute or relative to the current position. Defaults to True. True Examples: >>> click ( 100 , 100 ) >>> click ( 100 , 100 , button = \"right\" ) >>> click ( 100 , 100 , button = \"middle\" ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 , absolute = False ) Source code in my_dost\\mouse.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @dostify ( errors = [( ValueError , '' )]) def click ( x : int , y : int , button : str = \"left\" , clicks : int = 1 , absolute : bool = True ): \"\"\"Clicks the mouse at the given co-ordinates. Args: x (int): X co-ordinate. y (int): Y co-ordinate. button (str): The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". clicks (int): Number of times to click the mouse button. Defaults to 1. absolute (bool): Whether the co-ordinates are absolute or relative to the current position. Defaults to True. Examples: >>> click(100, 100) >>> click(100, 100, button=\"right\") >>> click(100, 100, button=\"middle\") >>> click(100, 100, button=\"left\", clicks=2) >>> click(100, 100, button=\"left\", clicks=2, absolute=False) \"\"\" # import section import pywinauto as pwa import win32api if button not in [ \"left\" , \"right\" , \"middle\" , \"l\" , \"r\" , \"m\" ]: raise ValueError ( f 'Invalid button: { button } . Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\".' ) if not absolute : current_x , current_y = win32api . GetCursorPos () x , y = ( current_x + x ), ( current_y + y ) if button in { \"left\" , \"l\" }: button = \"left\" elif button in { \"right\" , \"r\" }: button = \"right\" elif button in { \"middle\" , \"m\" }: button = \"middle\" for _ in range ( clicks ): pwa . mouse . click ( coords = ( x , y ), button = button ) search ( img , wait = 10 , left_click = False ) Searches for the given image and returns the co-ordinates of the image. Parameters: Name Type Description Default img Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the image. required wait int The time to wait for the image to appear. Defaults to 10. 10 left_click bool Whether to left click on the image. Defaults to False. False Returns: Type Description Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None] A tuple containing the X and Y co-ordinates of the image. Examples: >>> search ( 'tests\\demo.png' ) (23, 17) >>> search ( 'tests\\demo.png' , wait = 20 , left_click = True ) >>> search ([ 'tests\\demo.png' , 'tests\\demo2.png' ]) [(23, 17), (67, 16)] >>> search ( 'tests\\demo2.pdf' ) You got ValueError error: Invalid image file: D:\\PyBOTs\\my_dost\\tests\\demo2.pdf. Supported image formats: .png, .jpg, .jpeg, .bmp, .gif Source code in my_dost\\mouse.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @dostify ( errors = [( FileNotFoundError , '' ), ( ValueError , '' )]) def search ( img : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]], wait : int = 10 , left_click : bool = False ) -> Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None ]: \"\"\"Searches for the given image and returns the co-ordinates of the image. Args: img (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the image. wait (int): The time to wait for the image to appear. Defaults to 10. left_click (bool): Whether to left click on the image. Defaults to False. Returns: A tuple containing the X and Y co-ordinates of the image. Examples: >>> search('tests\\\\demo.png') (23, 17) >>> search('tests\\\\demo.png', wait=20, left_click=True) >>> search(['tests\\\\demo.png', 'tests\\\\demo2.png']) [(23, 17), (67, 16)] >>> search('tests\\\\demo2.pdf') You got ValueError error: Invalid image file: D:\\PyBOTs\\my_dost\\\\tests\\demo2.pdf. Supported image formats: .png, .jpg, .jpeg, .bmp, .gif \"\"\" # import section import pyscreeze as ps import os # List case handling if isinstance ( img , list ): return [ search ( i , wait = wait ) for i in img ] # Validation section path = os . path . abspath ( img ) if not os . path . isfile ( path ): raise FileNotFoundError ( f 'File not found: { path } ' ) # check whether given image is a valid image file or not ext = os . path . splitext ( path )[ 1 ] if ext not in [ '.png' , '.jpg' , '.jpeg' , '.bmp' , '.gif' ]: raise ValueError ( f 'Invalid image file: { path } . Supported image formats: .png, .jpg, .jpeg, .bmp, .gif' ) # Body section point = ps . locateCenterOnScreen ( path , minSearchTime = wait ) if point is None : raise ValueError ( f 'Image not found: { path } ' ) if left_click : click ( point . x , point . y ) return None return ( point . x , point . y )","title":"Mouse"},{"location":"mouse/#my_dost.mouse.click","text":"Clicks the mouse at the given co-ordinates. Parameters: Name Type Description Default x int X co-ordinate. required y int Y co-ordinate. required button str The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". 'left' clicks int Number of times to click the mouse button. Defaults to 1. 1 absolute bool Whether the co-ordinates are absolute or relative to the current position. Defaults to True. True Examples: >>> click ( 100 , 100 ) >>> click ( 100 , 100 , button = \"right\" ) >>> click ( 100 , 100 , button = \"middle\" ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 , absolute = False ) Source code in my_dost\\mouse.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 @dostify ( errors = [( ValueError , '' )]) def click ( x : int , y : int , button : str = \"left\" , clicks : int = 1 , absolute : bool = True ): \"\"\"Clicks the mouse at the given co-ordinates. Args: x (int): X co-ordinate. y (int): Y co-ordinate. button (str): The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". clicks (int): Number of times to click the mouse button. Defaults to 1. absolute (bool): Whether the co-ordinates are absolute or relative to the current position. Defaults to True. Examples: >>> click(100, 100) >>> click(100, 100, button=\"right\") >>> click(100, 100, button=\"middle\") >>> click(100, 100, button=\"left\", clicks=2) >>> click(100, 100, button=\"left\", clicks=2, absolute=False) \"\"\" # import section import pywinauto as pwa import win32api if button not in [ \"left\" , \"right\" , \"middle\" , \"l\" , \"r\" , \"m\" ]: raise ValueError ( f 'Invalid button: { button } . Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\".' ) if not absolute : current_x , current_y = win32api . GetCursorPos () x , y = ( current_x + x ), ( current_y + y ) if button in { \"left\" , \"l\" }: button = \"left\" elif button in { \"right\" , \"r\" }: button = \"right\" elif button in { \"middle\" , \"m\" }: button = \"middle\" for _ in range ( clicks ): pwa . mouse . click ( coords = ( x , y ), button = button )","title":"click()"},{"location":"mouse/#my_dost.mouse.search","text":"Searches for the given image and returns the co-ordinates of the image. Parameters: Name Type Description Default img Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the image. required wait int The time to wait for the image to appear. Defaults to 10. 10 left_click bool Whether to left click on the image. Defaults to False. False Returns: Type Description Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None] A tuple containing the X and Y co-ordinates of the image. Examples: >>> search ( 'tests\\demo.png' ) (23, 17) >>> search ( 'tests\\demo.png' , wait = 20 , left_click = True ) >>> search ([ 'tests\\demo.png' , 'tests\\demo2.png' ]) [(23, 17), (67, 16)] >>> search ( 'tests\\demo2.pdf' ) You got ValueError error: Invalid image file: D:\\PyBOTs\\my_dost\\tests\\demo2.pdf. Supported image formats: .png, .jpg, .jpeg, .bmp, .gif Source code in my_dost\\mouse.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @dostify ( errors = [( FileNotFoundError , '' ), ( ValueError , '' )]) def search ( img : Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]], wait : int = 10 , left_click : bool = False ) -> Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None ]: \"\"\"Searches for the given image and returns the co-ordinates of the image. Args: img (Union[str, List[str], WindowsPath, List[WindowsPath]]): The path to the image. wait (int): The time to wait for the image to appear. Defaults to 10. left_click (bool): Whether to left click on the image. Defaults to False. Returns: A tuple containing the X and Y co-ordinates of the image. Examples: >>> search('tests\\\\demo.png') (23, 17) >>> search('tests\\\\demo.png', wait=20, left_click=True) >>> search(['tests\\\\demo.png', 'tests\\\\demo2.png']) [(23, 17), (67, 16)] >>> search('tests\\\\demo2.pdf') You got ValueError error: Invalid image file: D:\\PyBOTs\\my_dost\\\\tests\\demo2.pdf. Supported image formats: .png, .jpg, .jpeg, .bmp, .gif \"\"\" # import section import pyscreeze as ps import os # List case handling if isinstance ( img , list ): return [ search ( i , wait = wait ) for i in img ] # Validation section path = os . path . abspath ( img ) if not os . path . isfile ( path ): raise FileNotFoundError ( f 'File not found: { path } ' ) # check whether given image is a valid image file or not ext = os . path . splitext ( path )[ 1 ] if ext not in [ '.png' , '.jpg' , '.jpeg' , '.bmp' , '.gif' ]: raise ValueError ( f 'Invalid image file: { path } . Supported image formats: .png, .jpg, .jpeg, .bmp, .gif' ) # Body section point = ps . locateCenterOnScreen ( path , minSearchTime = wait ) if point is None : raise ValueError ( f 'Image not found: { path } ' ) if left_click : click ( point . x , point . y ) return None return ( point . x , point . y )","title":"search()"}]}