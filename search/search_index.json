{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the DOST project that is a utility module for Python. This package is a collection of utilities that you can use in your projects. Table Of Contents Clipboard Converter Excel File Folder Keyboard Mail Message Mouse Pdf Text Utility Voice Windows Quickly find what you're looking for depending on your use case by looking at the different pages. Acknowledgements I would like to thank the people who have made this project possible. My sincere thanks to all the authors of the packages that I have used in this project.","title":"Home"},{"location":"#table-of-contents","text":"Clipboard Converter Excel File Folder Keyboard Mail Message Mouse Pdf Text Utility Voice Windows Quickly find what you're looking for depending on your use case by looking at the different pages.","title":"Table Of Contents"},{"location":"#acknowledgements","text":"I would like to thank the people who have made this project possible. My sincere thanks to all the authors of the packages that I have used in this project.","title":"Acknowledgements"},{"location":"clipboard/","text":"Clipboard module for dost. This module is used to interact with the Windows clipboard. Examples: >>> from dost import clipboard >>> clipboard . set_data ( 'Hello World!' ) >>> clipboard . get_data () 'Hello World!' It contains the following functions: set_data(data, format_id) : Set the clipboard data to the given string. get_data(format_id) -> str : Get the clipboard data as a string. get_data ( format_id = win32clipboard . CF_UNICODETEXT ) Get the clipboard data as a string. Parameters: Name Type Description Default format_id int The format of the data. Defaults to CF_UNICODETEXT. win32clipboard.CF_UNICODETEXT Returns: Type Description str The clipboard data as a string. Examples: >>> get_data () 'Hello World!' set_data ( data , format_id = win32clipboard . CF_UNICODETEXT ) Set the clipboard data to the given string. Parameters: Name Type Description Default data str The data to set the clipboard to. required format_id int The format of the data. Defaults to CF_UNICODETEXT. win32clipboard.CF_UNICODETEXT Examples: >>> set_data ( 'Hello World!' ) >>> get_data () 'Hello World!'","title":"Clipboard"},{"location":"clipboard/#dost.clipboard.get_data","text":"Get the clipboard data as a string. Parameters: Name Type Description Default format_id int The format of the data. Defaults to CF_UNICODETEXT. win32clipboard.CF_UNICODETEXT Returns: Type Description str The clipboard data as a string. Examples: >>> get_data () 'Hello World!'","title":"get_data()"},{"location":"clipboard/#dost.clipboard.set_data","text":"Set the clipboard data to the given string. Parameters: Name Type Description Default data str The data to set the clipboard to. required format_id int The format of the data. Defaults to CF_UNICODETEXT. win32clipboard.CF_UNICODETEXT Examples: >>> set_data ( 'Hello World!' ) >>> get_data () 'Hello World!'","title":"set_data()"},{"location":"converter/","text":"Converter module for dost. This module contains functions to convert between different data types. Examples: >>> from dost import converter >>> converter . csv_to_excel ( 'tests\\demo.csv' ) >>> converter . base64_to_image ( 'tests\\demo.txt' ) >>> converter . image_to_base64 ( 'tests\\demo.png' ) >>> converter . jpg_to_png ( 'tests\\demo.jpg' ) >>> converter . png_to_jpg ( 'tests\\demo.png' ) >>> converter . excel_to_html ( 'tests\\demo.xlsx' ) The module contains the following functions: csv_to_excel(input_filepath, output_folder, output_filename, contains_headers, sep) : Convert a CSV file to an Excel file. base64_to_image(input_text, output_folder, output_filename) : Convert a base64 string to an image. image_to_base64(image_path) : Convert an image to a base64 string. jpg_to_png(input_filepath, output_folder, output_filename) : Convert a JPG image to a PNG image. png_to_jpg(input_filepath, output_folder, output_filename) : Convert a PNG image to a JPG image. excel_to_html(input_filepath, output_folder, output_filename) : Convert an Excel file to an HTML file. base64_to_image ( input_text , output_folder = '' , output_filename = '' ) Get an image from a base64 encoded string. Parameters: Name Type Description Default input_text str The base64 encoded string. required output_folder str , WindowsPath The path to the output folder. '' output_filename str default ending with .png The name of the output file. '' Examples: >>> base64_to_image ( '\"base_64_string' ) csv_to_excel ( input_filepath , output_folder = '' , output_filename = '' , contains_headers = True , sep = ',' ) Convert a CSV file to an Excel file. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the CSV file. required output_folder str , WindowsPath The path to the output folder. '' output_filename str The name of the output file. '' contains_headers bool Whether the CSV file contains headers. True sep str The separator used in the CSV file. ',' Examples: >>> csv_to_excel ( 'tests\\demo.csv' ) excel_to_html ( input_filepath , output_folder = '' , output_filename = '' ) Converts the excel file to colored html file Parameters: Name Type Description Default input_filepath str , WindowsPath Input excel file path required output_folder str , WindowsPath Output folder path '' output_filename str Output file name '' Examples: >>> excel_to_html ( 'tests\\demo.xlsx' ) image_to_base64 ( input_filepath ) Get a base64 encoded string from an image. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the image file. required Returns: Name Type Description str str The base64 encoded string. Examples: >>> image_to_base64 ( 'tests\\demo.png' ) jpg_to_png ( input_filepath , output_folder = '' , output_filename = '' ) Convert a JPG image to a PNG image. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the JPG image. required output_folder str , WindowsPath The path to the output folder. '' output_filename str The name of the output file. '' Examples: >>> jpg_to_png ( 'tests\\demo.jpg' ) png_to_jpg ( input_filepath , output_folder = '' , output_filename = '' ) Converts the image from png to jpg format Parameters: Name Type Description Default input_filepath str , WindowsPath Input image file path required output_folder str , WindowsPath Output folder path '' output_filename str Output file name '' Examples: >>> png_to_jpg ( 'tests\\demo.png' )","title":"Converter"},{"location":"converter/#dost.converter.base64_to_image","text":"Get an image from a base64 encoded string. Parameters: Name Type Description Default input_text str The base64 encoded string. required output_folder str , WindowsPath The path to the output folder. '' output_filename str default ending with .png The name of the output file. '' Examples: >>> base64_to_image ( '\"base_64_string' )","title":"base64_to_image()"},{"location":"converter/#dost.converter.csv_to_excel","text":"Convert a CSV file to an Excel file. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the CSV file. required output_folder str , WindowsPath The path to the output folder. '' output_filename str The name of the output file. '' contains_headers bool Whether the CSV file contains headers. True sep str The separator used in the CSV file. ',' Examples: >>> csv_to_excel ( 'tests\\demo.csv' )","title":"csv_to_excel()"},{"location":"converter/#dost.converter.excel_to_html","text":"Converts the excel file to colored html file Parameters: Name Type Description Default input_filepath str , WindowsPath Input excel file path required output_folder str , WindowsPath Output folder path '' output_filename str Output file name '' Examples: >>> excel_to_html ( 'tests\\demo.xlsx' )","title":"excel_to_html()"},{"location":"converter/#dost.converter.image_to_base64","text":"Get a base64 encoded string from an image. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the image file. required Returns: Name Type Description str str The base64 encoded string. Examples: >>> image_to_base64 ( 'tests\\demo.png' )","title":"image_to_base64()"},{"location":"converter/#dost.converter.jpg_to_png","text":"Convert a JPG image to a PNG image. Parameters: Name Type Description Default input_filepath str , WindowsPath The path to the JPG image. required output_folder str , WindowsPath The path to the output folder. '' output_filename str The name of the output file. '' Examples: >>> jpg_to_png ( 'tests\\demo.jpg' )","title":"jpg_to_png()"},{"location":"converter/#dost.converter.png_to_jpg","text":"Converts the image from png to jpg format Parameters: Name Type Description Default input_filepath str , WindowsPath Input image file path required output_folder str , WindowsPath Output folder path '' output_filename str Output file name '' Examples: >>> png_to_jpg ( 'tests\\demo.png' )","title":"png_to_jpg()"},{"location":"excel/","text":"Excel Module for dost. This module contains functions for working with excel and spreadsheets Examples: >>> get_row_column_count ( df ) (10, 5) >>> get_single_cell ( \"C:\\Users\\user\\Desktop\\excel_file.xlsx\" , \"Column1\" , 1 ) \"abc\" >>> excel_create_file ( output_folder = \"C:\\Users\\user\\Desktop\" , output_filename = \"test.xlsx\" , output_sheetname = \"Sheet1\" ) This module contains the following functions: authenticate_google_spreadsheet(credential_file_path) : This creates authentication object for google spreadsheet. get_dataframe_from_google_spreadsheet(auth, spreadsheet_url, sheet_name) : Get dataframe from google spreadsheet. tabular_data_from_website(url, table_id) : Get tabular data from website. upload_dataframe_to_google_spreadsheet(auth, spreadsheet_url, sheet_name, df) : Upload dataframe to google spreadsheet. create_file(output_folder, output_filename, output_sheetname) : Create excel file. valid_data(input_filepath, input_sheetname, validate_filepath, validate_sheetname) : Check if data is valid. to_dataframe(excel_file_path, sheet_name,header) : Convert excel file to dataframe. get_row_column_count(df) : Get row and column count of dataframe. dataframe_to_excel(df, excel_folder, excel_file_name, sheet_name, mode) : Convert dataframe to excel file. set_single_cell(df, column_name, cell_number, value) : Set single cell value in excel file. get_single_cell(df, column_name, cell_number, header) : Get single cell value from excel file. get_all_header_columns(df) : Get all header columns from excel file. get_all_sheet_names(excel_file_path) : Get all sheet names from excel file. drop_columns(dataframe, columns_to_drop) : Drop columns from data frame. clear_sheet(dataframe) : Clear sheet from excel file. remove_duplicates(dataframe, column_name) : Remove duplicates from excel file. isNaN(value) : Check if value is NaN. df_from_list(list_of_lists, header names) : Create dataframe from list of lists. df_from_string(string, delimiter) : Create dataframe from string. df_extract_sub_df(dataframe, row_start, row_end, column_start, column_end) : Extract sub dataframe from dataframe. set_value_in_df(dataframe, column_name, row_number, value) : Set value in dataframe. get_value_in_df(dataframe, column_name, row_number) : Get value from dataframe. df_drop_rows(dataframe, row_start, row_end) : Drop rows from dataframe. authenticate_google_spreadsheet ( credential_file_path ) Creates authentication object for google spreadsheet. Parameters: Name Type Description Default credential_file_path WindowsPath Credential file path. required Returns: Name Type Description object object Authentication object. Examples: >>> auth = authenticate_google_spreadsheet ( credential_file_path = \"C:\\Users\\user\\Desktop\\credentials.json\" ) clear_sheet ( df ) Clears the sheet Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description data df Modified dataframe Examples: >>> clear_sheet ( df ) df create_file ( output_folder , output_filename , output_sheetname = 'Sheet1' ) Creates an excel file with a sheet in the specified folder. Parameters: Name Type Description Default output_folder WindowsPath Output folder path. required output_filename str Output file name. required output_sheetname str Output sheet name. Defaults to \"Sheet1\". 'Sheet1' Examples: >>> create_file ( output_folder = \"C:\\Users\\user\\Desktop\" , output_filename = \"test.xlsx\" , output_sheetname = \"Sheet1\" ) dataframe_to_excel ( df , output_folder , output_filename , output_sheetname = 'Sheet1' , mode = 'a' ) Converts the dataframe to excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required output_folder WindowsPath Output folder path. required output_filename str Output file name. required output_sheetname str Output sheet name. Defaults to \"Sheet1\". 'Sheet1' mode str Mode of the excel file. Defaults to 'a'. 'a' Examples: >>> dataframe_to_excel ( df , output_folder = \"C:\\Users\\user\\Desktop\" , output_filename = \"test.xlsx\" , output_sheetname = \"Sheet1\" , mode = 'a' ) df_drop_rows ( df , row_start , row_end ) Drops rows from dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_start int row start (inclusive) required row_end int row end (exclusive) required Returns: Type Description pd . DataFrame pandas dataframe: dataframe with rows dropped Examples: >>> df = df_drop_rows ( df , 1 , 2 ) df_extract_sub_df ( df , row_start , row_end , column_start , column_end ) Extracts sub dataframe from the given dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_start int row start (inclusive) required row_end int row end (exclusive) required column_start int column start (inclusive) required column_end int column end (exclusive) required Returns: Type Description pd . DataFrame pandas dataframe(pandas dataframe): sub dataframe Examples: >>> df_extract_sub_df ( df , 1 , 2 , 3 , 4 ) sub_dataframe df_from_list ( list_of_lists , column_names ) Converts list of lists to dataframe Parameters: Name Type Description Default list_of_lists list list of lists to be converted to dataframe required column_names list column names required Returns: Type Description pd . DataFrame pandas dataframe: dataframe Examples: >>> df_from_list ([[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]], [ \"col1\" , \"col2\" , \"col3\" ]) dataframe .. col1 col2 col3 0 1 2 3 1 4 5 6 df_from_string ( df_string , word_delimeter = ' ' , line_delimeter = ' \\n ' , column_names = None ) Converts string to dataframe Parameters: Name Type Description Default df_string str string to be converted to dataframe required word_delimeter str word delimeter.Defaults to space ' ' line_delimeter str line delimeter. Defaults to new line '\\n' column_names list column names. Defaults to None None Returns: Type Description pd . DataFrame pandas dataframe: dataframe Examples: >>> print ( df_from_string ( \"a b c;d e f\" , \" \" , \";\" , [ \"Column 1\" , \"Column 2\" , \"Column 3\" ])) dataframe object .. Column 1 Column 2 Column 3 0 a b c 1 d e f drop_columns ( df , cols ) Drops the columns from the excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required cols str, list(str Column name to be dropped. required Returns: Name Type Description data df Modified dataframe Examples: >>> drop_columns ( df , \"column_name\" ) df get_all_header_columns ( df ) Gets all header columns from the excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description data list List of header columns Examples: >>> get_all_header_columns ( df ) [\"Column1\", \"Column2\"] get_all_sheet_names ( input_filepath ) Gets the sheet names from the excel file Parameters: Name Type Description Default input_filepath str Path of the excel file. required Returns: Name Type Description data list List of sheet names Examples: >>> get_all_sheet_names ( \"demo\" ) [\"Sheet1\", \"Sheet2\"] get_dataframe_from_google_spreadsheet ( auth , spreadsheet_url , sheet_name = 'Sheet1' ) Get dataframe from google spreadsheet Parameters: Name Type Description Default auth object Authentication object. required spreadsheet_url str Spreadsheet URL. required sheet_name str Sheet name. 'Sheet1' Returns: Name Type Description df pd . DataFrame Dataframe object. Examples: >>> get_dataframe_from_google_spreadsheet ( auth , spreadsheet_url = \"https://docs.google.com/spreadsheets/d/1X2X3X4X5X6X7X8X9X/edit#gid=0\" , sheet_name = \"Sheet1\" ) df get_row_column_count ( df ) Returns the row and column count of the dataframe Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description tuple tuple Row and column count of the dataframe. Examples: >>> get_row_column_count ( df ) (10, 5) get_single_cell ( df , column_name , cell_number , header = 1 ) Gets the text from the desired column/cell number for the given excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required cell_number int Cell number of the excel file. Defaults to 1. required header int Header row number. Defaults to 1. 1 Returns: Name Type Description data str Text from the desired column/cell number for the given excel file Examples: >>> get_single_cell ( df , \"Column 1\" , 1 ) \"abc\" get_value_in_df ( df , row_number , column_number ) Gets value from dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_number int Row number of the cell required column_number int Column number of the cell required Returns: Name Type Description str str value in the cell Examples: >>> get_value_in_df ( df , 1 , 2 ) abc isNaN ( value ) Checks if the value is NaN Parameters: Name Type Description Default value str of number value to be checked required Returns: Name Type Description bool bool True if value is NaN, False otherwise Examples: >>> isNaN ( \"abc\" ) False remove_duplicates ( df , column_name ) Removes the duplicates from the given column Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required Returns: Name Type Description data df Modified dataframe Examples: >>> remove_duplicates ( df , \"column_name\" ) df set_single_cell ( df , column_name , cell_number , text ) Description Writes the given text to the desired column/cell number for the given excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required cell_number int Cell number of the excel file. Defaults to 1. required text str Text to be written to the excel file. Defaults to \"\". required Returns: Name Type Description data df Modified dataframe Examples: >>> set_single_cell ( dataframe , \"Column 1\" , 1 , \"abc\" ) df set_value_in_df ( df , row_number , column_number , value ) Sets value in dataframe Parameters: Name Type Description Default df pandas dataframe dataframe to be modified required row_number int Row number of the cell required column_number int Column number of the cell required value str value to be set in the cell required Returns: Type Description pd . DataFrame pandas dataframe: dataframe with value set Examples: >>> set_value_in_df ( df , 1 , 2 , \"abc\" ) modified_dataframe tabular_data_from_website ( website_url , table_number = 1 ) Returns a dataframe from a website table. Parameters: Name Type Description Default website_url str Website URL. required table_number int Table number. Defaults to 1. 1 Examples: >>> tabular_data_from_website ( website_url = \"https://en.wikipedia.org/wiki/Wiki\" ) to_dataframe ( input_filepath , input_sheetname , header = 1 ) Converts excel file to dataframe. Parameters: Name Type Description Default input_filepath Union [ str , WindowsPath ] Input file path. required input_sheetname str Input sheet name. required header int Header row number. Defaults to 1. 1 Returns: Type Description pd . DataFrame pd.DataFrame: Dataframe of the excel file. Examples: >>> to_dataframe ( input_filepath = \"C:\\Users\\user\\Desktop \\t est.xlsx\" , input_sheetname = \"Sheet1\" ) dataframe upload_dataframe_to_google_spreadsheet ( auth , spreadsheet_url , sheet_name , df ) Uploads a dataframe to a google spreadsheet. Parameters: Name Type Description Default auth object Authentication object. required spreadsheet_url str Spreadsheet URL. required sheet_name str Sheet name. required df pd . DataFrame Dataframe object. required Examples: >>> upload_dataframe_to_google_spreadsheet ( auth = auth , spreadsheet_url = \"https://docs.google.com/spreadsheets/d/1X2X3X4X5X6X7X8X9X/edit#gid=0\" , sheet_name = \"Sheet1\" , df = df ) valid_data ( input_filepath , input_sheetname = '' , validate_filepath = True , validate_sheetname = True ) This function validates the input file path and sheet name. Parameters: Name Type Description Default input_filepath WindowsPath Input file path. required input_sheetname str Input sheet name. '' validate_filepath bool Whether to validate file path or not. Defaults to True. True validate_sheetname bool Whether to validate sheet name or not. Defaults to True. True Returns: Name Type Description bool bool True if valid, False if invalid. Examples: >>> valid_data ( input_filepath = \"C:\\Users\\user\\Desktop \\t est.xlsx\" , input_sheetname = \"Sheet1\" ) True","title":"Excel"},{"location":"excel/#dost.excel.authenticate_google_spreadsheet","text":"Creates authentication object for google spreadsheet. Parameters: Name Type Description Default credential_file_path WindowsPath Credential file path. required Returns: Name Type Description object object Authentication object. Examples: >>> auth = authenticate_google_spreadsheet ( credential_file_path = \"C:\\Users\\user\\Desktop\\credentials.json\" )","title":"authenticate_google_spreadsheet()"},{"location":"excel/#dost.excel.clear_sheet","text":"Clears the sheet Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description data df Modified dataframe Examples: >>> clear_sheet ( df ) df","title":"clear_sheet()"},{"location":"excel/#dost.excel.create_file","text":"Creates an excel file with a sheet in the specified folder. Parameters: Name Type Description Default output_folder WindowsPath Output folder path. required output_filename str Output file name. required output_sheetname str Output sheet name. Defaults to \"Sheet1\". 'Sheet1' Examples: >>> create_file ( output_folder = \"C:\\Users\\user\\Desktop\" , output_filename = \"test.xlsx\" , output_sheetname = \"Sheet1\" )","title":"create_file()"},{"location":"excel/#dost.excel.dataframe_to_excel","text":"Converts the dataframe to excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required output_folder WindowsPath Output folder path. required output_filename str Output file name. required output_sheetname str Output sheet name. Defaults to \"Sheet1\". 'Sheet1' mode str Mode of the excel file. Defaults to 'a'. 'a' Examples: >>> dataframe_to_excel ( df , output_folder = \"C:\\Users\\user\\Desktop\" , output_filename = \"test.xlsx\" , output_sheetname = \"Sheet1\" , mode = 'a' )","title":"dataframe_to_excel()"},{"location":"excel/#dost.excel.df_drop_rows","text":"Drops rows from dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_start int row start (inclusive) required row_end int row end (exclusive) required Returns: Type Description pd . DataFrame pandas dataframe: dataframe with rows dropped Examples: >>> df = df_drop_rows ( df , 1 , 2 )","title":"df_drop_rows()"},{"location":"excel/#dost.excel.df_extract_sub_df","text":"Extracts sub dataframe from the given dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_start int row start (inclusive) required row_end int row end (exclusive) required column_start int column start (inclusive) required column_end int column end (exclusive) required Returns: Type Description pd . DataFrame pandas dataframe(pandas dataframe): sub dataframe Examples: >>> df_extract_sub_df ( df , 1 , 2 , 3 , 4 ) sub_dataframe","title":"df_extract_sub_df()"},{"location":"excel/#dost.excel.df_from_list","text":"Converts list of lists to dataframe Parameters: Name Type Description Default list_of_lists list list of lists to be converted to dataframe required column_names list column names required Returns: Type Description pd . DataFrame pandas dataframe: dataframe Examples: >>> df_from_list ([[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]], [ \"col1\" , \"col2\" , \"col3\" ]) dataframe .. col1 col2 col3 0 1 2 3 1 4 5 6","title":"df_from_list()"},{"location":"excel/#dost.excel.df_from_string","text":"Converts string to dataframe Parameters: Name Type Description Default df_string str string to be converted to dataframe required word_delimeter str word delimeter.Defaults to space ' ' line_delimeter str line delimeter. Defaults to new line '\\n' column_names list column names. Defaults to None None Returns: Type Description pd . DataFrame pandas dataframe: dataframe Examples: >>> print ( df_from_string ( \"a b c;d e f\" , \" \" , \";\" , [ \"Column 1\" , \"Column 2\" , \"Column 3\" ])) dataframe object .. Column 1 Column 2 Column 3 0 a b c 1 d e f","title":"df_from_string()"},{"location":"excel/#dost.excel.drop_columns","text":"Drops the columns from the excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required cols str, list(str Column name to be dropped. required Returns: Name Type Description data df Modified dataframe Examples: >>> drop_columns ( df , \"column_name\" ) df","title":"drop_columns()"},{"location":"excel/#dost.excel.get_all_header_columns","text":"Gets all header columns from the excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description data list List of header columns Examples: >>> get_all_header_columns ( df ) [\"Column1\", \"Column2\"]","title":"get_all_header_columns()"},{"location":"excel/#dost.excel.get_all_sheet_names","text":"Gets the sheet names from the excel file Parameters: Name Type Description Default input_filepath str Path of the excel file. required Returns: Name Type Description data list List of sheet names Examples: >>> get_all_sheet_names ( \"demo\" ) [\"Sheet1\", \"Sheet2\"]","title":"get_all_sheet_names()"},{"location":"excel/#dost.excel.get_dataframe_from_google_spreadsheet","text":"Get dataframe from google spreadsheet Parameters: Name Type Description Default auth object Authentication object. required spreadsheet_url str Spreadsheet URL. required sheet_name str Sheet name. 'Sheet1' Returns: Name Type Description df pd . DataFrame Dataframe object. Examples: >>> get_dataframe_from_google_spreadsheet ( auth , spreadsheet_url = \"https://docs.google.com/spreadsheets/d/1X2X3X4X5X6X7X8X9X/edit#gid=0\" , sheet_name = \"Sheet1\" ) df","title":"get_dataframe_from_google_spreadsheet()"},{"location":"excel/#dost.excel.get_row_column_count","text":"Returns the row and column count of the dataframe Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required Returns: Name Type Description tuple tuple Row and column count of the dataframe. Examples: >>> get_row_column_count ( df ) (10, 5)","title":"get_row_column_count()"},{"location":"excel/#dost.excel.get_single_cell","text":"Gets the text from the desired column/cell number for the given excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required cell_number int Cell number of the excel file. Defaults to 1. required header int Header row number. Defaults to 1. 1 Returns: Name Type Description data str Text from the desired column/cell number for the given excel file Examples: >>> get_single_cell ( df , \"Column 1\" , 1 ) \"abc\"","title":"get_single_cell()"},{"location":"excel/#dost.excel.get_value_in_df","text":"Gets value from dataframe Parameters: Name Type Description Default df pandas dataframe dataframe required row_number int Row number of the cell required column_number int Column number of the cell required Returns: Name Type Description str str value in the cell Examples: >>> get_value_in_df ( df , 1 , 2 ) abc","title":"get_value_in_df()"},{"location":"excel/#dost.excel.isNaN","text":"Checks if the value is NaN Parameters: Name Type Description Default value str of number value to be checked required Returns: Name Type Description bool bool True if value is NaN, False otherwise Examples: >>> isNaN ( \"abc\" ) False","title":"isNaN()"},{"location":"excel/#dost.excel.remove_duplicates","text":"Removes the duplicates from the given column Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required Returns: Name Type Description data df Modified dataframe Examples: >>> remove_duplicates ( df , \"column_name\" ) df","title":"remove_duplicates()"},{"location":"excel/#dost.excel.set_single_cell","text":"Description Writes the given text to the desired column/cell number for the given excel file Parameters: Name Type Description Default df pandas dataframe Dataframe of the excel file. required column_name str Column name of the excel file. Defaults to \"\". required cell_number int Cell number of the excel file. Defaults to 1. required text str Text to be written to the excel file. Defaults to \"\". required Returns: Name Type Description data df Modified dataframe Examples: >>> set_single_cell ( dataframe , \"Column 1\" , 1 , \"abc\" ) df","title":"set_single_cell()"},{"location":"excel/#dost.excel.set_value_in_df","text":"Sets value in dataframe Parameters: Name Type Description Default df pandas dataframe dataframe to be modified required row_number int Row number of the cell required column_number int Column number of the cell required value str value to be set in the cell required Returns: Type Description pd . DataFrame pandas dataframe: dataframe with value set Examples: >>> set_value_in_df ( df , 1 , 2 , \"abc\" ) modified_dataframe","title":"set_value_in_df()"},{"location":"excel/#dost.excel.tabular_data_from_website","text":"Returns a dataframe from a website table. Parameters: Name Type Description Default website_url str Website URL. required table_number int Table number. Defaults to 1. 1 Examples: >>> tabular_data_from_website ( website_url = \"https://en.wikipedia.org/wiki/Wiki\" )","title":"tabular_data_from_website()"},{"location":"excel/#dost.excel.to_dataframe","text":"Converts excel file to dataframe. Parameters: Name Type Description Default input_filepath Union [ str , WindowsPath ] Input file path. required input_sheetname str Input sheet name. required header int Header row number. Defaults to 1. 1 Returns: Type Description pd . DataFrame pd.DataFrame: Dataframe of the excel file. Examples: >>> to_dataframe ( input_filepath = \"C:\\Users\\user\\Desktop \\t est.xlsx\" , input_sheetname = \"Sheet1\" ) dataframe","title":"to_dataframe()"},{"location":"excel/#dost.excel.upload_dataframe_to_google_spreadsheet","text":"Uploads a dataframe to a google spreadsheet. Parameters: Name Type Description Default auth object Authentication object. required spreadsheet_url str Spreadsheet URL. required sheet_name str Sheet name. required df pd . DataFrame Dataframe object. required Examples: >>> upload_dataframe_to_google_spreadsheet ( auth = auth , spreadsheet_url = \"https://docs.google.com/spreadsheets/d/1X2X3X4X5X6X7X8X9X/edit#gid=0\" , sheet_name = \"Sheet1\" , df = df )","title":"upload_dataframe_to_google_spreadsheet()"},{"location":"excel/#dost.excel.valid_data","text":"This function validates the input file path and sheet name. Parameters: Name Type Description Default input_filepath WindowsPath Input file path. required input_sheetname str Input sheet name. '' validate_filepath bool Whether to validate file path or not. Defaults to True. True validate_sheetname bool Whether to validate sheet name or not. Defaults to True. True Returns: Name Type Description bool bool True if valid, False if invalid. Examples: >>> valid_data ( input_filepath = \"C:\\Users\\user\\Desktop \\t est.xlsx\" , input_sheetname = \"Sheet1\" ) True","title":"valid_data()"},{"location":"file/","text":"File module for dost. This module is used to interact with files. Examples: >>> from dost import file >>> file . read_text ( 'tests\\demo.txt' ) 'This is a demo text file.' It contains the following functions: read_text(path) : Read a text file and return the content as a string. write_text(path, content) : Write a text file with the given content. copy(source, destination) : Copy a file from the source to the destination. move(source, destination) : Move a file from the source to the destination. delete(path) : Delete a file at the given path. rename(path, new_name) : Rename a file at the given path. create(path) : Create a file at the given path. copy ( source , destination ) Copy a file from source to destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source file. required destination Union [ str , WindowsPath ] The path to the destination file. required Examples: >>> copy ( 'tests\\demo.txt' , 'tests\\demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.' create ( path ) Create a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required Examples: >>> create ( 'tests\\demo.txt' ) >>> read_text ( 'tests\\demo.txt' ) '' delete ( path ) Delete a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required Examples: >>> delete ( 'tests\\demo.txt' ) >>> read_text ( 'tests\\demo.txt' ) '' move ( source , destination ) Move a file from source to destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source file. required destination Union [ str , WindowsPath ] The path to the destination file. required Examples: >>> move ( 'tests\\demo.txt' , 'tests\\demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.' read_text ( path ) Reads a text file and returns its contents as a string. Parameters: Name Type Description Default path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> read_text ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.'] rename ( path , new_name ) Rename a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required new_name str The new name of the file. required Examples: >>> rename ( 'tests\\demo.txt' , 'demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.' write_text ( path , contents ) Write a text file with the given contents. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> write_text ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> read_text ( 'tests\\demo.txt' ) 'This is a demo text file.'","title":"File"},{"location":"file/#dost.file.copy","text":"Copy a file from source to destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source file. required destination Union [ str , WindowsPath ] The path to the destination file. required Examples: >>> copy ( 'tests\\demo.txt' , 'tests\\demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.'","title":"copy()"},{"location":"file/#dost.file.create","text":"Create a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required Examples: >>> create ( 'tests\\demo.txt' ) >>> read_text ( 'tests\\demo.txt' ) ''","title":"create()"},{"location":"file/#dost.file.delete","text":"Delete a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required Examples: >>> delete ( 'tests\\demo.txt' ) >>> read_text ( 'tests\\demo.txt' ) ''","title":"delete()"},{"location":"file/#dost.file.move","text":"Move a file from source to destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source file. required destination Union [ str , WindowsPath ] The path to the destination file. required Examples: >>> move ( 'tests\\demo.txt' , 'tests\\demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.'","title":"move()"},{"location":"file/#dost.file.read_text","text":"Reads a text file and returns its contents as a string. Parameters: Name Type Description Default path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the text file. required Returns: Type Description Union [ str , List [ str ]] The contents of the text file. If a list of paths is provided, a list of strings is returned. Examples: >>> read_text ( 'tests\\demo.txt' ) 'This is a demo text file.' >>> read_text ([ 'tests\\demo.txt' , 'tests\\demo2.txt' ]) ['This is a demo text file.', 'This is a demo2 text file.']","title":"read_text()"},{"location":"file/#dost.file.rename","text":"Rename a file. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the file. required new_name str The new name of the file. required Examples: >>> rename ( 'tests\\demo.txt' , 'demo2.txt' ) >>> read_text ( 'tests\\demo2.txt' ) 'This is a demo text file.'","title":"rename()"},{"location":"file/#dost.file.write_text","text":"Write a text file with the given contents. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the text file. required contents str The contents of the text file. required Examples: >>> write_text ( 'tests\\demo.txt' , 'This is a demo text file.' ) >>> read_text ( 'tests\\demo.txt' ) 'This is a demo text file.'","title":"write_text()"},{"location":"folder/","text":"Folder module for dost. This module contains functions for working with folders and files. Examples: >>> from dost import folder >>> folder . create_folder ( 'tests\\demo' ) >>> folder . delete_folder ( 'tests\\demo' ) It contains the following functions: create_folder(path) : Create a folder at the given path. delete_folder(path) : Delete a folder at the given path. rename_folder(path, new_name) : Rename a folder at the given path. copy_folder(source, destination) : Copy a folder from the source to the destination. move_folder(source, destination) : Move a folder from the source to the destination. get_size(path) -> int : Get the size of a folder in bytes. get_size_human(path) -> str : Get the size of a folder in human readable format. get_contents(path) -> list : Get a list of all files and folders in a folder. get_contents_recursive(path) -> list : Get a list of all files and folders in a folder and all subfolders. copy_folder ( source , destination ) Copy a folder from the source to the destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source folder. required destination Union [ str , WindowsPath ] The path to the destination folder. required Examples: >>> copy_folder ( 'tests\\demo' , 'tests\\demo2' ) >>> os . path . exists ( 'tests\\demo2' ) True create_folder ( path ) Create a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Examples: >>> create_folder ( 'tests\\demo' ) >>> os . path . exists ( 'tests\\demo' ) True delete_folder ( path ) Delete a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Examples: >>> delete_folder ( 'tests\\demo' ) >>> os . path . exists ( 'tests\\demo' ) False get_contents ( path ) Get a list of all files and folders in a folder. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description list list A list of all files and folders in the folder. Examples: >>> get_contents ( 'tests' ) ['demo', 'demo2', 'demo.txt'] get_contents_recursive ( path ) Get a list of all files and folders in a folder and all subfolders. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description list list A list of all files and folders in the folder and all subfolders. Examples: >>> get_contents_recursive ( 'tests' ) ['demo', 'demo2', 'demo.txt'] get_size ( path ) Get the size of a folder in bytes. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description int int The size of the folder in bytes. Examples: >>> get_size ( 'tests' ) 0 get_size_human ( path ) Get the size of a folder in human readable format. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description str str The size of the folder in human readable format. Examples: >>> get_size_human ( 'tests' ) '0 bytes' move_folder ( source , destination ) Move a folder from the source to the destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source folder. required destination Union [ str , WindowsPath ] The path to the destination folder. required Examples: >>> move_folder ( 'tests\\demo' , 'tests\\demo2' ) >>> os . path . exists ( 'tests\\demo' ) False >>> os . path . exists ( 'tests\\demo2' ) True rename_folder ( path , new_name ) Rename a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required new_name str The new name of the folder. required Examples: >>> rename_folder ( 'tests\\demo' , 'demo2' ) >>> os . path . exists ( 'tests\\demo2' ) True","title":"Folder"},{"location":"folder/#dost.folder.copy_folder","text":"Copy a folder from the source to the destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source folder. required destination Union [ str , WindowsPath ] The path to the destination folder. required Examples: >>> copy_folder ( 'tests\\demo' , 'tests\\demo2' ) >>> os . path . exists ( 'tests\\demo2' ) True","title":"copy_folder()"},{"location":"folder/#dost.folder.create_folder","text":"Create a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Examples: >>> create_folder ( 'tests\\demo' ) >>> os . path . exists ( 'tests\\demo' ) True","title":"create_folder()"},{"location":"folder/#dost.folder.delete_folder","text":"Delete a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Examples: >>> delete_folder ( 'tests\\demo' ) >>> os . path . exists ( 'tests\\demo' ) False","title":"delete_folder()"},{"location":"folder/#dost.folder.get_contents","text":"Get a list of all files and folders in a folder. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description list list A list of all files and folders in the folder. Examples: >>> get_contents ( 'tests' ) ['demo', 'demo2', 'demo.txt']","title":"get_contents()"},{"location":"folder/#dost.folder.get_contents_recursive","text":"Get a list of all files and folders in a folder and all subfolders. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description list list A list of all files and folders in the folder and all subfolders. Examples: >>> get_contents_recursive ( 'tests' ) ['demo', 'demo2', 'demo.txt']","title":"get_contents_recursive()"},{"location":"folder/#dost.folder.get_size","text":"Get the size of a folder in bytes. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description int int The size of the folder in bytes. Examples: >>> get_size ( 'tests' ) 0","title":"get_size()"},{"location":"folder/#dost.folder.get_size_human","text":"Get the size of a folder in human readable format. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required Returns: Name Type Description str str The size of the folder in human readable format. Examples: >>> get_size_human ( 'tests' ) '0 bytes'","title":"get_size_human()"},{"location":"folder/#dost.folder.move_folder","text":"Move a folder from the source to the destination. Parameters: Name Type Description Default source Union [ str , WindowsPath ] The path to the source folder. required destination Union [ str , WindowsPath ] The path to the destination folder. required Examples: >>> move_folder ( 'tests\\demo' , 'tests\\demo2' ) >>> os . path . exists ( 'tests\\demo' ) False >>> os . path . exists ( 'tests\\demo2' ) True","title":"move_folder()"},{"location":"folder/#dost.folder.rename_folder","text":"Rename a folder at the given path. Parameters: Name Type Description Default path Union [ str , WindowsPath ] The path to the folder. required new_name str The new name of the folder. required Examples: >>> rename_folder ( 'tests\\demo' , 'demo2' ) >>> os . path . exists ( 'tests\\demo2' ) True","title":"rename_folder()"},{"location":"keyboard/","text":"Keyboard module for dost.This module contains functions for keyboard input and output. Examples: >>> from dost import keyboard >>> keyboard . press ( 'a' ) >>> keyboard . write_enter ( 'Hello World!' ) >>> keyboard . hit_enter () This module contains the following functions: press(key) : Check if a key is pressed. write_enter(text) : Write text and press enter. hit_enter() : Press enter. hit_enter ( write_to_window ) Hit enter key Parameters: Name Type Description Default write_to_window str Window to write to required Examples: >>> press ( write_to_window = \"Notepad\" , key = \"enter\" ,) press ( key_1 , key_2 = '' , key_3 = '' , write_to_window = '' ) Press a key or a combination of keys. Parameters: Name Type Description Default write_to_window str The window to write to. '' key_1 str The first key to press. required key_2 str The second key to press. '' key_3 str The third key to press. '' Examples: >>> press ( 'Notepad' , 'a' ) >>> press ( 'Notepad' , ' {VK_CONTROL} ' , 'S' ) >>> press ( 'Notepad' , ' {VK_CONTROL} ' , 'S' , \"enter\" ) write_enter ( write_to_window , text_to_write , key = 'e' ) Write text to window and press enter key Parameters: Name Type Description Default write_to_window str Window to write to required text_to_write str Text to write required key str Key to press. Defaults to \"e\". 'e' Examples: >>> write_enter ( \"Notepad\" , \"Hello World\" )","title":"Keyboard"},{"location":"keyboard/#dost.keyboard.hit_enter","text":"Hit enter key Parameters: Name Type Description Default write_to_window str Window to write to required Examples: >>> press ( write_to_window = \"Notepad\" , key = \"enter\" ,)","title":"hit_enter()"},{"location":"keyboard/#dost.keyboard.press","text":"Press a key or a combination of keys. Parameters: Name Type Description Default write_to_window str The window to write to. '' key_1 str The first key to press. required key_2 str The second key to press. '' key_3 str The third key to press. '' Examples: >>> press ( 'Notepad' , 'a' ) >>> press ( 'Notepad' , ' {VK_CONTROL} ' , 'S' ) >>> press ( 'Notepad' , ' {VK_CONTROL} ' , 'S' , \"enter\" )","title":"press()"},{"location":"keyboard/#dost.keyboard.write_enter","text":"Write text to window and press enter key Parameters: Name Type Description Default write_to_window str Window to write to required text_to_write str Text to write required key str Key to press. Defaults to \"e\". 'e' Examples: >>> write_enter ( \"Notepad\" , \"Hello World\" )","title":"write_enter()"},{"location":"mail/","text":"Mail module for dost. This module contains functions for sending emails. Examples: >>> from dost import mail >>> mail.send_gmail_using_app_password('abcd','abcd','abcd@abc.com','abcd','abcd','abc.pdf') This module contains the following functions: send_gmail_using_app_password(sender_email, sender_password, receiver_email, subject, body, attachment_path) : Send an email using a gmail account and an app password. send_gmail_using_app_password ( gmail_username , gmail_app_password , to_email_id , subject , message , attachment_path = '' ) Send email using gmail app password Parameters: Name Type Description Default gmail_username str Gmail username required gmail_app_password str Gmail app password required to_email_id Union [ str , List [ str ]] To email id required subject str Subject of the email required message str Message of the email required attachment_path Union [ str , List ( str )( optional ), WindowsPath , List [ WindowsPath ]] Attachment path '' Examples: >>> send_gmail_using_app_password ( 'abcd' , 'abcd' , 'abcd@abc.com' , 'abcd' , 'abcd' , 'abc.pdf' )","title":"Mail"},{"location":"mail/#dost.mail.send_gmail_using_app_password","text":"Send email using gmail app password Parameters: Name Type Description Default gmail_username str Gmail username required gmail_app_password str Gmail app password required to_email_id Union [ str , List [ str ]] To email id required subject str Subject of the email required message str Message of the email required attachment_path Union [ str , List ( str )( optional ), WindowsPath , List [ WindowsPath ]] Attachment path '' Examples: >>> send_gmail_using_app_password ( 'abcd' , 'abcd' , 'abcd@abc.com' , 'abcd' , 'abcd' , 'abc.pdf' )","title":"send_gmail_using_app_password()"},{"location":"message/","text":"Message module for dost. This module contains functions for displaying messages to the user. Examples: >>> from dost import message >>> message . info ( 'Hello World!' ) >>> message . error ( 'Hello World!' ) >>> message . warning ( 'Hello World!' ) The module contains the following functions: info(msg) : Display an info message. error(msg) : Display an error message. warning(msg) : Display a warning message. error ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error ( 'This is a demo message.' ) info ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. title (str, optional): The title of the message box. Defaults to \"PyBOTs\". Examples: >>> info ( 'This is a demo message.' ) warning ( message , title = 'PyBOTs' ) Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning ( 'This is a demo message.' )","title":"Message"},{"location":"message/#dost.message.error","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> error ( 'This is a demo message.' )","title":"error()"},{"location":"message/#dost.message.info","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. title (str, optional): The title of the message box. Defaults to \"PyBOTs\". Examples: >>> info ( 'This is a demo message.' )","title":"info()"},{"location":"message/#dost.message.warning","text":"Display a message box with an 'OK' button. Args: message (str): The message to display to the user. Examples: >>> warning ( 'This is a demo message.' )","title":"warning()"},{"location":"mouse/","text":"Mouse module for dost. This module contains functions for mouse control. Examples: >>> from dost import mouse >>> mouse . click ( 100 , 100 ) >>> mouse . search ( 'tests\\demo.png' ) (23, 17) The module contains the following functions: click(x, y, button, clicks, absolute) : Click at the given coordinates. search(img_path, wait, left_click) : Search for an image on the screen and return the coordinates of the top-left corner of the image. click ( x , y , button = 'left' , clicks = 1 , absolute = True ) Clicks the mouse at the given co-ordinates. Parameters: Name Type Description Default x int X co-ordinate. required y int Y co-ordinate. required button str The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". 'left' clicks int Number of times to click the mouse button. Defaults to 1. 1 absolute bool Whether the co-ordinates are absolute or relative to the current position. Defaults to True. True Examples: >>> click ( 100 , 100 ) >>> click ( 100 , 100 , button = \"right\" ) >>> click ( 100 , 100 , button = \"middle\" ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 , absolute = False ) search ( img_path , conf = 0.9 , wait = 10 , left_click = False ) Searches for the given image and returns the co-ordinates of the image. Parameters: Name Type Description Default img_path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the image. required wait int The time to wait for the image to appear. Defaults to 10. 10 left_click bool Whether to left click on the image. Defaults to False. False Returns: Type Description Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None] A tuple containing the X and Y co-ordinates of the image. Examples: >>> search ( 'tests\\demo.png' ) (23, 17) >>> search ( 'tests\\demo.png' , wait = 20 , left_click = True ) >>> search ([ 'tests\\demo.png' , 'tests\\demo2.png' ]) [(23, 17), (67, 16)]","title":"Mouse"},{"location":"mouse/#dost.mouse.click","text":"Clicks the mouse at the given co-ordinates. Parameters: Name Type Description Default x int X co-ordinate. required y int Y co-ordinate. required button str The button to click. Can be \"left\", \"right\" or \"middle\". Defaults to \"left\". Possible values: \"left\", \"l\", \"right\", \"r\", \"middle\", \"m\". 'left' clicks int Number of times to click the mouse button. Defaults to 1. 1 absolute bool Whether the co-ordinates are absolute or relative to the current position. Defaults to True. True Examples: >>> click ( 100 , 100 ) >>> click ( 100 , 100 , button = \"right\" ) >>> click ( 100 , 100 , button = \"middle\" ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 ) >>> click ( 100 , 100 , button = \"left\" , clicks = 2 , absolute = False )","title":"click()"},{"location":"mouse/#dost.mouse.search","text":"Searches for the given image and returns the co-ordinates of the image. Parameters: Name Type Description Default img_path Union [ str , List [ str ], WindowsPath , List [ WindowsPath ]] The path to the image. required wait int The time to wait for the image to appear. Defaults to 10. 10 left_click bool Whether to left click on the image. Defaults to False. False Returns: Type Description Union [ Tuple [ int , int ], List [ Tuple [ int , int ]], None] A tuple containing the X and Y co-ordinates of the image. Examples: >>> search ( 'tests\\demo.png' ) (23, 17) >>> search ( 'tests\\demo.png' , wait = 20 , left_click = True ) >>> search ([ 'tests\\demo.png' , 'tests\\demo2.png' ]) [(23, 17), (67, 16)]","title":"search()"},{"location":"pdf/","text":"PDF module for dost. This module is used to extract data from PDF files. Examples: >>> pdf . extract_all_tables ( \"C:\\Users\\user\\Desktop\\demo.pdf\" , \"C:\\Users\\user\\Desktop \\\" , \" demo \") The module contains the following functions: extract_all_tables(pdf_file_path, output_folder, output_file_name, table_with_borders) : Extracts all tables from a pdf file and saves them as csv files in the specified folder. extract_all_tables ( pdf_file_path , output_folder , output_file_name , table_with_borders = True ) Extracts all tables from a pdf file and saves them as csv files in the specified folder. Parameters: Name Type Description Default pdf_file_path str , WindowsPath Path to the pdf file. required output_folder str , WindowsPath Path to the output folder. required output_file_name str Name of the output file. required table_with_borders bool Whether the table has borders. Defaults to True. True Examples: >>> extract_all_tables ( \"C:\\Users\\user\\Desktop\\demo.pdf\" , \"C:\\Users\\user\\Desktop \\\" , \" demo \")","title":"Pdf"},{"location":"pdf/#dost.pdf.extract_all_tables","text":"Extracts all tables from a pdf file and saves them as csv files in the specified folder. Parameters: Name Type Description Default pdf_file_path str , WindowsPath Path to the pdf file. required output_folder str , WindowsPath Path to the output folder. required output_file_name str Name of the output file. required table_with_borders bool Whether the table has borders. Defaults to True. True Examples: >>> extract_all_tables ( \"C:\\Users\\user\\Desktop\\demo.pdf\" , \"C:\\Users\\user\\Desktop \\\" , \" demo \")","title":"extract_all_tables()"},{"location":"text/","text":"String Module for dost.This module contains functions for working with strings. Examples: >>> from dost import text >>> text . get_alphabets ( \"hello123:l;,\" ) 'hellol' >>> text . get_numbers ( \"hello123:l;,\" ) '123 >>> text . remove_special_characters ( \"hello123:l;,\" ) 'hello123l' The module contains the following functions: get_alphabets(string) : Extract only alphabets from the given string. get_numbers(string) : Extract only numbers from the given string. remove_special_characters(string) : Remove special characters from the given string. get_alphabets ( text ) Extracts alphabets from the given string. Parameters: Name Type Description Default text str The string from which alphabets are to be extracted. required Returns: Name Type Description str str Alphabets from the given string. Examples: >>> get_alphabets ( \"hello123:l;,\" ) 'hellol' get_numbers ( text ) Extracts alphabets from the given string. Parameters: Name Type Description Default text str The string from which numbers are to be extracted. required Returns: Name Type Description str str Numbers extracted from the given string. Examples: >>> get_numbers ( \"hello123:l;,\" ) '123' remove_special_characters ( text ) Removes special characters from the given string. Parameters: Name Type Description Default text str The string from which special characters are to be removed. required Returns: Name Type Description str str The string without special characters. Examples: >>> extract_only_alphabets ( \"hello123:l;,\" ) 'hello123l'","title":"Text"},{"location":"text/#dost.text.get_alphabets","text":"Extracts alphabets from the given string. Parameters: Name Type Description Default text str The string from which alphabets are to be extracted. required Returns: Name Type Description str str Alphabets from the given string. Examples: >>> get_alphabets ( \"hello123:l;,\" ) 'hellol'","title":"get_alphabets()"},{"location":"text/#dost.text.get_numbers","text":"Extracts alphabets from the given string. Parameters: Name Type Description Default text str The string from which numbers are to be extracted. required Returns: Name Type Description str str Numbers extracted from the given string. Examples: >>> get_numbers ( \"hello123:l;,\" ) '123'","title":"get_numbers()"},{"location":"text/#dost.text.remove_special_characters","text":"Removes special characters from the given string. Parameters: Name Type Description Default text str The string from which special characters are to be removed. required Returns: Name Type Description str str The string without special characters. Examples: >>> extract_only_alphabets ( \"hello123:l;,\" ) 'hello123l'","title":"remove_special_characters()"},{"location":"utility/","text":"Utility module for dost. This module contains utility functions. Examples: >>> import dost.utility as utility >>> utility . pause_program ( 5 ) >>> utility . api_request ( \"https://google.com\" ) >>> utility . clear_output () >>> utility . install_module ( \"requests\" ) >>> utility . uninstall_module ( \"requests\" ) >>> utility . get_module_version ( \"requests\" ) >>> utility . image_to_text ( \"image.png\" ) This module contains the following functions: pause_program(seconds:int=\"5\") : Pauses the program for the specified number of seconds api_request(url: str, method='GET', body: dict = None, headers: dict = None)->dict : Makes an API request to the specified URL clear_output() : Clears the output of the console install_module(module_name:str) : Installs the specified module uninstall_module(module_name:str) : Uninstalls the specified module get_module_version(module_name:str) : Gets the version of the specified module image_to_text(image_path:str) : Converts the specified image to text api_request ( url , method = 'GET' , body = None , headers = None ) Makes an API request to the specified URL Parameters: Name Type Description Default url str URL to make request to required method str HTTP method to use. Defaults to 'GET'. 'GET' body dict Body of the request. Defaults to None. None headers dict Headers of the request. Defaults to None. None Returns: Name Type Description dict dict Response from the API Examples: >>> api_request ( \"https://google.com\" ) clear_output () Clears the output of the console Examples: >>> clear_output () get_module_version ( module_name ) Gets the version of the specified module Parameters: Name Type Description Default module_name str Name of the module to get the version of required Returns: Name Type Description str str Version of the specified module Examples: >>> get_module_version ( \"requests\" ) image_to_text ( image_path ) Converts the specified image to text Parameters: Name Type Description Default image_path WindowsPath Path to the image required Returns: Name Type Description string str Text from the image Examples: >>> image_to_text ( \"tests\\demo2.png\" ) install_module ( module_name ) Installs the specified module Parameters: Name Type Description Default module_name str Name of the module to install required Examples: >>> install_module ( \"requests\" ) pause_program ( seconds = '5' ) Pauses the program for the specified number of seconds Parameters: Name Type Description Default seconds int Number of seconds to pause the program. Defaults to \"5\". '5' Examples: >>> pause_program ( 5 ) uninstall_module ( module_name ) Uninstalls the specified module Parameters: Name Type Description Default module_name str Name of the module to uninstall required Examples: >>> uninstall_module ( \"requests\" )","title":"Utility"},{"location":"utility/#dost.utility.api_request","text":"Makes an API request to the specified URL Parameters: Name Type Description Default url str URL to make request to required method str HTTP method to use. Defaults to 'GET'. 'GET' body dict Body of the request. Defaults to None. None headers dict Headers of the request. Defaults to None. None Returns: Name Type Description dict dict Response from the API Examples: >>> api_request ( \"https://google.com\" )","title":"api_request()"},{"location":"utility/#dost.utility.clear_output","text":"Clears the output of the console Examples: >>> clear_output ()","title":"clear_output()"},{"location":"utility/#dost.utility.get_module_version","text":"Gets the version of the specified module Parameters: Name Type Description Default module_name str Name of the module to get the version of required Returns: Name Type Description str str Version of the specified module Examples: >>> get_module_version ( \"requests\" )","title":"get_module_version()"},{"location":"utility/#dost.utility.image_to_text","text":"Converts the specified image to text Parameters: Name Type Description Default image_path WindowsPath Path to the image required Returns: Name Type Description string str Text from the image Examples: >>> image_to_text ( \"tests\\demo2.png\" )","title":"image_to_text()"},{"location":"utility/#dost.utility.install_module","text":"Installs the specified module Parameters: Name Type Description Default module_name str Name of the module to install required Examples: >>> install_module ( \"requests\" )","title":"install_module()"},{"location":"utility/#dost.utility.pause_program","text":"Pauses the program for the specified number of seconds Parameters: Name Type Description Default seconds int Number of seconds to pause the program. Defaults to \"5\". '5' Examples: >>> pause_program ( 5 )","title":"pause_program()"},{"location":"utility/#dost.utility.uninstall_module","text":"Uninstalls the specified module Parameters: Name Type Description Default module_name str Name of the module to uninstall required Examples: >>> uninstall_module ( \"requests\" )","title":"uninstall_module()"},{"location":"voice/","text":"Voice Module for dost.This module contains all the functions related to voice recognition and text to speech. Examples: >>> from dost import voice >>> voice . text_to_speech ( \"Hello World\" ) This module contains the following functions: speech_to_text() : Converts speech to text. text_to_speech(audio, show, rate) : Converts text to speech. speech_to_text () Converts speech to text Returns: Name Type Description string str Text from the speech Examples: >>> speech_to_text () \"Hello World\" text_to_speech ( audio , show = True , rate = 170 ) Converts text to speech offline Parameters: Name Type Description Default audio string Text to be converted to speech required show bool Whether to print the text or not True rate int Rate of speech. Default is 170 170 Examples: >>> text_to_speech ( \"Hello World\" )","title":"Voice"},{"location":"voice/#dost.voice.speech_to_text","text":"Converts speech to text Returns: Name Type Description string str Text from the speech Examples: >>> speech_to_text () \"Hello World\"","title":"speech_to_text()"},{"location":"voice/#dost.voice.text_to_speech","text":"Converts text to speech offline Parameters: Name Type Description Default audio string Text to be converted to speech required show bool Whether to print the text or not True rate int Rate of speech. Default is 170 170 Examples: >>> text_to_speech ( \"Hello World\" )","title":"text_to_speech()"},{"location":"windows/","text":"Windows module for dost.This module contains functions that are specific to Windows. Examples: >>> from dost import windows >>> windows . show_desktop () >>> windows . get_active_window () 'Notepad' >>> window . get_all_opened_window_titles () ['Notepad', 'Program Manager', 'Desktop'] >>> windows . maximize_window ( 'Notepad' ) >>> windows . minimize_window ( 'Notepad' ) >>> windows . close_window ( 'Notepad' ) >>> windows . launch_app ( 'notepad' ) The module contains the following functions: show_desktop() : Show the desktop. get_active_window() : Get the active window. get_all_opened_window_titles() : Get all opened windows. maximize_window(window_name) : Maximize a window. minimize_window(window_name) : Minimize a window. close_window(window_name) : Close a window. launch_app(path) : Launch any windows application by its path or name. activate_window ( window_name ) Activate window Parameters: Name Type Description Default window_name str Window title required Examples: >>> windows . activate_window ( 'Notepad' ) close_window ( window_name ) Closes the window Parameters: Name Type Description Default window_name str Window name required Examples: >>> windows . close_window ( 'Notepad' ) get_active_window () Get active window Returns: Type Description str Union[str,List[str]]: Active window Examples: >>> windows . get_active_window () get_all_opened_window_titles () Get all opened titles windows Returns: Type Description Union [ str , List [ str ]] Union[str, List[str]]: All opened titles windows Examples: >>> windows . get_all_opened_window_titles () launch_app ( path ) Launch any exe/bat application Parameters: Name Type Description Default path Union [ str , WindowsPath ] Path to exe/bat application or application name required Raises: Type Description FileNotFoundError If path is not found ValueError If path is empty Examples: >>> windows . launch_app ( notepad ) maximize_window ( window_name ) Maximize windows Parameters: Name Type Description Default window_name str Window name. Defaults to \"\". required Examples: >>> windows . maximize_window () minimize_window ( window_name ) Minimize windows Parameters: Name Type Description Default window_name str Window name required Examples: >>> windows . minimize_window ( 'Notepad' ) show_desktop () Minimize all windows and show the desktop. Examples: >>> windows . show_desktop ()","title":"Windows"},{"location":"windows/#dost.windows.activate_window","text":"Activate window Parameters: Name Type Description Default window_name str Window title required Examples: >>> windows . activate_window ( 'Notepad' )","title":"activate_window()"},{"location":"windows/#dost.windows.close_window","text":"Closes the window Parameters: Name Type Description Default window_name str Window name required Examples: >>> windows . close_window ( 'Notepad' )","title":"close_window()"},{"location":"windows/#dost.windows.get_active_window","text":"Get active window Returns: Type Description str Union[str,List[str]]: Active window Examples: >>> windows . get_active_window ()","title":"get_active_window()"},{"location":"windows/#dost.windows.get_all_opened_window_titles","text":"Get all opened titles windows Returns: Type Description Union [ str , List [ str ]] Union[str, List[str]]: All opened titles windows Examples: >>> windows . get_all_opened_window_titles ()","title":"get_all_opened_window_titles()"},{"location":"windows/#dost.windows.launch_app","text":"Launch any exe/bat application Parameters: Name Type Description Default path Union [ str , WindowsPath ] Path to exe/bat application or application name required Raises: Type Description FileNotFoundError If path is not found ValueError If path is empty Examples: >>> windows . launch_app ( notepad )","title":"launch_app()"},{"location":"windows/#dost.windows.maximize_window","text":"Maximize windows Parameters: Name Type Description Default window_name str Window name. Defaults to \"\". required Examples: >>> windows . maximize_window ()","title":"maximize_window()"},{"location":"windows/#dost.windows.minimize_window","text":"Minimize windows Parameters: Name Type Description Default window_name str Window name required Examples: >>> windows . minimize_window ( 'Notepad' )","title":"minimize_window()"},{"location":"windows/#dost.windows.show_desktop","text":"Minimize all windows and show the desktop. Examples: >>> windows . show_desktop ()","title":"show_desktop()"}]}